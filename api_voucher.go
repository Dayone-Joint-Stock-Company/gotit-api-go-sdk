/*
Sample API

Technical document APIs for API Version 4.

API version: 4.0.0
Contact: quang.huynh@gotit.vn
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gotit_api_go_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// VoucherAPIService VoucherAPI service
type VoucherAPIService service

type ApiCreateVoucherLinkERequest struct {
	ctx context.Context
	ApiService *VoucherAPIService
	xGIAuthorization *string
	rEQUESTCREATEVOUCHERLINKE *REQUESTCREATEVOUCHERLINKE
}

// Authorization
func (r ApiCreateVoucherLinkERequest) XGIAuthorization(xGIAuthorization string) ApiCreateVoucherLinkERequest {
	r.xGIAuthorization = &xGIAuthorization
	return r
}

func (r ApiCreateVoucherLinkERequest) REQUESTCREATEVOUCHERLINKE(rEQUESTCREATEVOUCHERLINKE REQUESTCREATEVOUCHERLINKE) ApiCreateVoucherLinkERequest {
	r.rEQUESTCREATEVOUCHERLINKE = &rEQUESTCREATEVOUCHERLINKE
	return r
}

func (r ApiCreateVoucherLinkERequest) Execute() (*VOUCHERERESPONSE, *http.Response, error) {
	return r.ApiService.CreateVoucherLinkEExecute(r)
}

/*
CreateVoucherLinkE Create voucher link e

Create voucher link e

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateVoucherLinkERequest
*/
func (a *VoucherAPIService) CreateVoucherLinkE(ctx context.Context) ApiCreateVoucherLinkERequest {
	return ApiCreateVoucherLinkERequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VOUCHERERESPONSE
func (a *VoucherAPIService) CreateVoucherLinkEExecute(r ApiCreateVoucherLinkERequest) (*VOUCHERERESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VOUCHERERESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VoucherAPIService.CreateVoucherLinkE")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4.0/vouchers/e"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xGIAuthorization == nil {
		return localVarReturnValue, nil, reportError("xGIAuthorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-GI-Authorization", r.xGIAuthorization, "simple", "")
	// body params
	localVarPostBody = r.rEQUESTCREATEVOUCHERLINKE
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v HTTPBADREQUEST
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v HTTPUNAUTHORIZED
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v HTTPNOTFOUND
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v HTTPINTERNALSERVERERROR
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateVoucherLinkGRequest struct {
	ctx context.Context
	ApiService *VoucherAPIService
	xGIAuthorization *string
	rEQUESTCREATEVOUCHERLINKG *REQUESTCREATEVOUCHERLINKG
}

// Authorization
func (r ApiCreateVoucherLinkGRequest) XGIAuthorization(xGIAuthorization string) ApiCreateVoucherLinkGRequest {
	r.xGIAuthorization = &xGIAuthorization
	return r
}

func (r ApiCreateVoucherLinkGRequest) REQUESTCREATEVOUCHERLINKG(rEQUESTCREATEVOUCHERLINKG REQUESTCREATEVOUCHERLINKG) ApiCreateVoucherLinkGRequest {
	r.rEQUESTCREATEVOUCHERLINKG = &rEQUESTCREATEVOUCHERLINKG
	return r
}

func (r ApiCreateVoucherLinkGRequest) Execute() (*VOUCHERGRESPONSE, *http.Response, error) {
	return r.ApiService.CreateVoucherLinkGExecute(r)
}

/*
CreateVoucherLinkG Create voucher link g

Create voucher link g

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateVoucherLinkGRequest
*/
func (a *VoucherAPIService) CreateVoucherLinkG(ctx context.Context) ApiCreateVoucherLinkGRequest {
	return ApiCreateVoucherLinkGRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VOUCHERGRESPONSE
func (a *VoucherAPIService) CreateVoucherLinkGExecute(r ApiCreateVoucherLinkGRequest) (*VOUCHERGRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VOUCHERGRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VoucherAPIService.CreateVoucherLinkG")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4.0/vouchers/g"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xGIAuthorization == nil {
		return localVarReturnValue, nil, reportError("xGIAuthorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-GI-Authorization", r.xGIAuthorization, "simple", "")
	// body params
	localVarPostBody = r.rEQUESTCREATEVOUCHERLINKG
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v HTTPBADREQUEST
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v HTTPUNAUTHORIZED
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v HTTPNOTFOUND
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v HTTPINTERNALSERVERERROR
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateVoucherLinkVRequest struct {
	ctx context.Context
	ApiService *VoucherAPIService
	xGIAuthorization *string
	rEQUESTCREATEVOUCHERLINKV *REQUESTCREATEVOUCHERLINKV
}

// Authorization
func (r ApiCreateVoucherLinkVRequest) XGIAuthorization(xGIAuthorization string) ApiCreateVoucherLinkVRequest {
	r.xGIAuthorization = &xGIAuthorization
	return r
}

func (r ApiCreateVoucherLinkVRequest) REQUESTCREATEVOUCHERLINKV(rEQUESTCREATEVOUCHERLINKV REQUESTCREATEVOUCHERLINKV) ApiCreateVoucherLinkVRequest {
	r.rEQUESTCREATEVOUCHERLINKV = &rEQUESTCREATEVOUCHERLINKV
	return r
}

func (r ApiCreateVoucherLinkVRequest) Execute() (*VOUCHERVRESPONSE, *http.Response, error) {
	return r.ApiService.CreateVoucherLinkVExecute(r)
}

/*
CreateVoucherLinkV Create voucher link v

Create voucher link v

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateVoucherLinkVRequest
*/
func (a *VoucherAPIService) CreateVoucherLinkV(ctx context.Context) ApiCreateVoucherLinkVRequest {
	return ApiCreateVoucherLinkVRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VOUCHERVRESPONSE
func (a *VoucherAPIService) CreateVoucherLinkVExecute(r ApiCreateVoucherLinkVRequest) (*VOUCHERVRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VOUCHERVRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VoucherAPIService.CreateVoucherLinkV")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4.0/vouchers/v"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xGIAuthorization == nil {
		return localVarReturnValue, nil, reportError("xGIAuthorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-GI-Authorization", r.xGIAuthorization, "simple", "")
	// body params
	localVarPostBody = r.rEQUESTCREATEVOUCHERLINKV
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v HTTPBADREQUEST
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v HTTPUNAUTHORIZED
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v HTTPNOTFOUND
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v HTTPINTERNALSERVERERROR
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
