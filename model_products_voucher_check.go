/*
Sample API

Technical document APIs for API Version 4.

API version: 4.0.0
Contact: quang.huynh@gotit.vn
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gotit_api_go_sdk

import (
	"encoding/json"
)

// checks if the PRODUCTSVOUCHERCHECK type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PRODUCTSVOUCHERCHECK{}

// PRODUCTSVOUCHERCHECK struct for PRODUCTSVOUCHERCHECK
type PRODUCTSVOUCHERCHECK struct {
	// Product Id
	ProductId NullableInt64 `json:"productId,omitempty"`
	// Product Name
	ProductNm NullableString `json:"productNm,omitempty"`
	// Link product image
	ProductImg NullableString `json:"productImg,omitempty"`
	// Brand id
	BrandId NullableInt64 `json:"brandId,omitempty"`
	// Brand name
	BrandNm NullableString `json:"brandNm,omitempty"`
	BrandServiceGuide NullableString `json:"brandServiceGuide,omitempty"`
	Price *PRODUCTPRICESCHEMA `json:"price,omitempty"`
	ProductDesc NullableString `json:"productDesc,omitempty"`
	Terms NullableString `json:"terms,omitempty"`
	StoreList []STOREPRODUCTSCHEMA `json:"storeList,omitempty"`
	TotalStore NullableInt64 `json:"totalStore,omitempty"`
	StorePagination *STOREPAGINGSCHEMA `json:"storePagination,omitempty"`
}

// NewPRODUCTSVOUCHERCHECK instantiates a new PRODUCTSVOUCHERCHECK object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPRODUCTSVOUCHERCHECK() *PRODUCTSVOUCHERCHECK {
	this := PRODUCTSVOUCHERCHECK{}
	return &this
}

// NewPRODUCTSVOUCHERCHECKWithDefaults instantiates a new PRODUCTSVOUCHERCHECK object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPRODUCTSVOUCHERCHECKWithDefaults() *PRODUCTSVOUCHERCHECK {
	this := PRODUCTSVOUCHERCHECK{}
	return &this
}

// GetProductId returns the ProductId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PRODUCTSVOUCHERCHECK) GetProductId() int64 {
	if o == nil || IsNil(o.ProductId.Get()) {
		var ret int64
		return ret
	}
	return *o.ProductId.Get()
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PRODUCTSVOUCHERCHECK) GetProductIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductId.Get(), o.ProductId.IsSet()
}

// HasProductId returns a boolean if a field has been set.
func (o *PRODUCTSVOUCHERCHECK) HasProductId() bool {
	if o != nil && o.ProductId.IsSet() {
		return true
	}

	return false
}

// SetProductId gets a reference to the given NullableInt64 and assigns it to the ProductId field.
func (o *PRODUCTSVOUCHERCHECK) SetProductId(v int64) {
	o.ProductId.Set(&v)
}
// SetProductIdNil sets the value for ProductId to be an explicit nil
func (o *PRODUCTSVOUCHERCHECK) SetProductIdNil() {
	o.ProductId.Set(nil)
}

// UnsetProductId ensures that no value is present for ProductId, not even an explicit nil
func (o *PRODUCTSVOUCHERCHECK) UnsetProductId() {
	o.ProductId.Unset()
}

// GetProductNm returns the ProductNm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PRODUCTSVOUCHERCHECK) GetProductNm() string {
	if o == nil || IsNil(o.ProductNm.Get()) {
		var ret string
		return ret
	}
	return *o.ProductNm.Get()
}

// GetProductNmOk returns a tuple with the ProductNm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PRODUCTSVOUCHERCHECK) GetProductNmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductNm.Get(), o.ProductNm.IsSet()
}

// HasProductNm returns a boolean if a field has been set.
func (o *PRODUCTSVOUCHERCHECK) HasProductNm() bool {
	if o != nil && o.ProductNm.IsSet() {
		return true
	}

	return false
}

// SetProductNm gets a reference to the given NullableString and assigns it to the ProductNm field.
func (o *PRODUCTSVOUCHERCHECK) SetProductNm(v string) {
	o.ProductNm.Set(&v)
}
// SetProductNmNil sets the value for ProductNm to be an explicit nil
func (o *PRODUCTSVOUCHERCHECK) SetProductNmNil() {
	o.ProductNm.Set(nil)
}

// UnsetProductNm ensures that no value is present for ProductNm, not even an explicit nil
func (o *PRODUCTSVOUCHERCHECK) UnsetProductNm() {
	o.ProductNm.Unset()
}

// GetProductImg returns the ProductImg field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PRODUCTSVOUCHERCHECK) GetProductImg() string {
	if o == nil || IsNil(o.ProductImg.Get()) {
		var ret string
		return ret
	}
	return *o.ProductImg.Get()
}

// GetProductImgOk returns a tuple with the ProductImg field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PRODUCTSVOUCHERCHECK) GetProductImgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductImg.Get(), o.ProductImg.IsSet()
}

// HasProductImg returns a boolean if a field has been set.
func (o *PRODUCTSVOUCHERCHECK) HasProductImg() bool {
	if o != nil && o.ProductImg.IsSet() {
		return true
	}

	return false
}

// SetProductImg gets a reference to the given NullableString and assigns it to the ProductImg field.
func (o *PRODUCTSVOUCHERCHECK) SetProductImg(v string) {
	o.ProductImg.Set(&v)
}
// SetProductImgNil sets the value for ProductImg to be an explicit nil
func (o *PRODUCTSVOUCHERCHECK) SetProductImgNil() {
	o.ProductImg.Set(nil)
}

// UnsetProductImg ensures that no value is present for ProductImg, not even an explicit nil
func (o *PRODUCTSVOUCHERCHECK) UnsetProductImg() {
	o.ProductImg.Unset()
}

// GetBrandId returns the BrandId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PRODUCTSVOUCHERCHECK) GetBrandId() int64 {
	if o == nil || IsNil(o.BrandId.Get()) {
		var ret int64
		return ret
	}
	return *o.BrandId.Get()
}

// GetBrandIdOk returns a tuple with the BrandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PRODUCTSVOUCHERCHECK) GetBrandIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BrandId.Get(), o.BrandId.IsSet()
}

// HasBrandId returns a boolean if a field has been set.
func (o *PRODUCTSVOUCHERCHECK) HasBrandId() bool {
	if o != nil && o.BrandId.IsSet() {
		return true
	}

	return false
}

// SetBrandId gets a reference to the given NullableInt64 and assigns it to the BrandId field.
func (o *PRODUCTSVOUCHERCHECK) SetBrandId(v int64) {
	o.BrandId.Set(&v)
}
// SetBrandIdNil sets the value for BrandId to be an explicit nil
func (o *PRODUCTSVOUCHERCHECK) SetBrandIdNil() {
	o.BrandId.Set(nil)
}

// UnsetBrandId ensures that no value is present for BrandId, not even an explicit nil
func (o *PRODUCTSVOUCHERCHECK) UnsetBrandId() {
	o.BrandId.Unset()
}

// GetBrandNm returns the BrandNm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PRODUCTSVOUCHERCHECK) GetBrandNm() string {
	if o == nil || IsNil(o.BrandNm.Get()) {
		var ret string
		return ret
	}
	return *o.BrandNm.Get()
}

// GetBrandNmOk returns a tuple with the BrandNm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PRODUCTSVOUCHERCHECK) GetBrandNmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BrandNm.Get(), o.BrandNm.IsSet()
}

// HasBrandNm returns a boolean if a field has been set.
func (o *PRODUCTSVOUCHERCHECK) HasBrandNm() bool {
	if o != nil && o.BrandNm.IsSet() {
		return true
	}

	return false
}

// SetBrandNm gets a reference to the given NullableString and assigns it to the BrandNm field.
func (o *PRODUCTSVOUCHERCHECK) SetBrandNm(v string) {
	o.BrandNm.Set(&v)
}
// SetBrandNmNil sets the value for BrandNm to be an explicit nil
func (o *PRODUCTSVOUCHERCHECK) SetBrandNmNil() {
	o.BrandNm.Set(nil)
}

// UnsetBrandNm ensures that no value is present for BrandNm, not even an explicit nil
func (o *PRODUCTSVOUCHERCHECK) UnsetBrandNm() {
	o.BrandNm.Unset()
}

// GetBrandServiceGuide returns the BrandServiceGuide field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PRODUCTSVOUCHERCHECK) GetBrandServiceGuide() string {
	if o == nil || IsNil(o.BrandServiceGuide.Get()) {
		var ret string
		return ret
	}
	return *o.BrandServiceGuide.Get()
}

// GetBrandServiceGuideOk returns a tuple with the BrandServiceGuide field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PRODUCTSVOUCHERCHECK) GetBrandServiceGuideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BrandServiceGuide.Get(), o.BrandServiceGuide.IsSet()
}

// HasBrandServiceGuide returns a boolean if a field has been set.
func (o *PRODUCTSVOUCHERCHECK) HasBrandServiceGuide() bool {
	if o != nil && o.BrandServiceGuide.IsSet() {
		return true
	}

	return false
}

// SetBrandServiceGuide gets a reference to the given NullableString and assigns it to the BrandServiceGuide field.
func (o *PRODUCTSVOUCHERCHECK) SetBrandServiceGuide(v string) {
	o.BrandServiceGuide.Set(&v)
}
// SetBrandServiceGuideNil sets the value for BrandServiceGuide to be an explicit nil
func (o *PRODUCTSVOUCHERCHECK) SetBrandServiceGuideNil() {
	o.BrandServiceGuide.Set(nil)
}

// UnsetBrandServiceGuide ensures that no value is present for BrandServiceGuide, not even an explicit nil
func (o *PRODUCTSVOUCHERCHECK) UnsetBrandServiceGuide() {
	o.BrandServiceGuide.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *PRODUCTSVOUCHERCHECK) GetPrice() PRODUCTPRICESCHEMA {
	if o == nil || IsNil(o.Price) {
		var ret PRODUCTPRICESCHEMA
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PRODUCTSVOUCHERCHECK) GetPriceOk() (*PRODUCTPRICESCHEMA, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *PRODUCTSVOUCHERCHECK) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given PRODUCTPRICESCHEMA and assigns it to the Price field.
func (o *PRODUCTSVOUCHERCHECK) SetPrice(v PRODUCTPRICESCHEMA) {
	o.Price = &v
}

// GetProductDesc returns the ProductDesc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PRODUCTSVOUCHERCHECK) GetProductDesc() string {
	if o == nil || IsNil(o.ProductDesc.Get()) {
		var ret string
		return ret
	}
	return *o.ProductDesc.Get()
}

// GetProductDescOk returns a tuple with the ProductDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PRODUCTSVOUCHERCHECK) GetProductDescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductDesc.Get(), o.ProductDesc.IsSet()
}

// HasProductDesc returns a boolean if a field has been set.
func (o *PRODUCTSVOUCHERCHECK) HasProductDesc() bool {
	if o != nil && o.ProductDesc.IsSet() {
		return true
	}

	return false
}

// SetProductDesc gets a reference to the given NullableString and assigns it to the ProductDesc field.
func (o *PRODUCTSVOUCHERCHECK) SetProductDesc(v string) {
	o.ProductDesc.Set(&v)
}
// SetProductDescNil sets the value for ProductDesc to be an explicit nil
func (o *PRODUCTSVOUCHERCHECK) SetProductDescNil() {
	o.ProductDesc.Set(nil)
}

// UnsetProductDesc ensures that no value is present for ProductDesc, not even an explicit nil
func (o *PRODUCTSVOUCHERCHECK) UnsetProductDesc() {
	o.ProductDesc.Unset()
}

// GetTerms returns the Terms field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PRODUCTSVOUCHERCHECK) GetTerms() string {
	if o == nil || IsNil(o.Terms.Get()) {
		var ret string
		return ret
	}
	return *o.Terms.Get()
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PRODUCTSVOUCHERCHECK) GetTermsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Terms.Get(), o.Terms.IsSet()
}

// HasTerms returns a boolean if a field has been set.
func (o *PRODUCTSVOUCHERCHECK) HasTerms() bool {
	if o != nil && o.Terms.IsSet() {
		return true
	}

	return false
}

// SetTerms gets a reference to the given NullableString and assigns it to the Terms field.
func (o *PRODUCTSVOUCHERCHECK) SetTerms(v string) {
	o.Terms.Set(&v)
}
// SetTermsNil sets the value for Terms to be an explicit nil
func (o *PRODUCTSVOUCHERCHECK) SetTermsNil() {
	o.Terms.Set(nil)
}

// UnsetTerms ensures that no value is present for Terms, not even an explicit nil
func (o *PRODUCTSVOUCHERCHECK) UnsetTerms() {
	o.Terms.Unset()
}

// GetStoreList returns the StoreList field value if set, zero value otherwise.
func (o *PRODUCTSVOUCHERCHECK) GetStoreList() []STOREPRODUCTSCHEMA {
	if o == nil || IsNil(o.StoreList) {
		var ret []STOREPRODUCTSCHEMA
		return ret
	}
	return o.StoreList
}

// GetStoreListOk returns a tuple with the StoreList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PRODUCTSVOUCHERCHECK) GetStoreListOk() ([]STOREPRODUCTSCHEMA, bool) {
	if o == nil || IsNil(o.StoreList) {
		return nil, false
	}
	return o.StoreList, true
}

// HasStoreList returns a boolean if a field has been set.
func (o *PRODUCTSVOUCHERCHECK) HasStoreList() bool {
	if o != nil && !IsNil(o.StoreList) {
		return true
	}

	return false
}

// SetStoreList gets a reference to the given []STOREPRODUCTSCHEMA and assigns it to the StoreList field.
func (o *PRODUCTSVOUCHERCHECK) SetStoreList(v []STOREPRODUCTSCHEMA) {
	o.StoreList = v
}

// GetTotalStore returns the TotalStore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PRODUCTSVOUCHERCHECK) GetTotalStore() int64 {
	if o == nil || IsNil(o.TotalStore.Get()) {
		var ret int64
		return ret
	}
	return *o.TotalStore.Get()
}

// GetTotalStoreOk returns a tuple with the TotalStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PRODUCTSVOUCHERCHECK) GetTotalStoreOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalStore.Get(), o.TotalStore.IsSet()
}

// HasTotalStore returns a boolean if a field has been set.
func (o *PRODUCTSVOUCHERCHECK) HasTotalStore() bool {
	if o != nil && o.TotalStore.IsSet() {
		return true
	}

	return false
}

// SetTotalStore gets a reference to the given NullableInt64 and assigns it to the TotalStore field.
func (o *PRODUCTSVOUCHERCHECK) SetTotalStore(v int64) {
	o.TotalStore.Set(&v)
}
// SetTotalStoreNil sets the value for TotalStore to be an explicit nil
func (o *PRODUCTSVOUCHERCHECK) SetTotalStoreNil() {
	o.TotalStore.Set(nil)
}

// UnsetTotalStore ensures that no value is present for TotalStore, not even an explicit nil
func (o *PRODUCTSVOUCHERCHECK) UnsetTotalStore() {
	o.TotalStore.Unset()
}

// GetStorePagination returns the StorePagination field value if set, zero value otherwise.
func (o *PRODUCTSVOUCHERCHECK) GetStorePagination() STOREPAGINGSCHEMA {
	if o == nil || IsNil(o.StorePagination) {
		var ret STOREPAGINGSCHEMA
		return ret
	}
	return *o.StorePagination
}

// GetStorePaginationOk returns a tuple with the StorePagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PRODUCTSVOUCHERCHECK) GetStorePaginationOk() (*STOREPAGINGSCHEMA, bool) {
	if o == nil || IsNil(o.StorePagination) {
		return nil, false
	}
	return o.StorePagination, true
}

// HasStorePagination returns a boolean if a field has been set.
func (o *PRODUCTSVOUCHERCHECK) HasStorePagination() bool {
	if o != nil && !IsNil(o.StorePagination) {
		return true
	}

	return false
}

// SetStorePagination gets a reference to the given STOREPAGINGSCHEMA and assigns it to the StorePagination field.
func (o *PRODUCTSVOUCHERCHECK) SetStorePagination(v STOREPAGINGSCHEMA) {
	o.StorePagination = &v
}

func (o PRODUCTSVOUCHERCHECK) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PRODUCTSVOUCHERCHECK) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ProductId.IsSet() {
		toSerialize["productId"] = o.ProductId.Get()
	}
	if o.ProductNm.IsSet() {
		toSerialize["productNm"] = o.ProductNm.Get()
	}
	if o.ProductImg.IsSet() {
		toSerialize["productImg"] = o.ProductImg.Get()
	}
	if o.BrandId.IsSet() {
		toSerialize["brandId"] = o.BrandId.Get()
	}
	if o.BrandNm.IsSet() {
		toSerialize["brandNm"] = o.BrandNm.Get()
	}
	if o.BrandServiceGuide.IsSet() {
		toSerialize["brandServiceGuide"] = o.BrandServiceGuide.Get()
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if o.ProductDesc.IsSet() {
		toSerialize["productDesc"] = o.ProductDesc.Get()
	}
	if o.Terms.IsSet() {
		toSerialize["terms"] = o.Terms.Get()
	}
	if !IsNil(o.StoreList) {
		toSerialize["storeList"] = o.StoreList
	}
	if o.TotalStore.IsSet() {
		toSerialize["totalStore"] = o.TotalStore.Get()
	}
	if !IsNil(o.StorePagination) {
		toSerialize["storePagination"] = o.StorePagination
	}
	return toSerialize, nil
}

type NullablePRODUCTSVOUCHERCHECK struct {
	value *PRODUCTSVOUCHERCHECK
	isSet bool
}

func (v NullablePRODUCTSVOUCHERCHECK) Get() *PRODUCTSVOUCHERCHECK {
	return v.value
}

func (v *NullablePRODUCTSVOUCHERCHECK) Set(val *PRODUCTSVOUCHERCHECK) {
	v.value = val
	v.isSet = true
}

func (v NullablePRODUCTSVOUCHERCHECK) IsSet() bool {
	return v.isSet
}

func (v *NullablePRODUCTSVOUCHERCHECK) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePRODUCTSVOUCHERCHECK(val *PRODUCTSVOUCHERCHECK) *NullablePRODUCTSVOUCHERCHECK {
	return &NullablePRODUCTSVOUCHERCHECK{value: val, isSet: true}
}

func (v NullablePRODUCTSVOUCHERCHECK) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePRODUCTSVOUCHERCHECK) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


