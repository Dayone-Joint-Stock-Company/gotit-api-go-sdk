/*
Sample API

Technical document APIs for API Version 4.

API version: 4.0.0
Contact: quang.huynh@gotit.vn
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gotit_api_go_sdk

import (
	"encoding/json"
)

// checks if the USAGEMETHODSCHEMA type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &USAGEMETHODSCHEMA{}

// USAGEMETHODSCHEMA struct for USAGEMETHODSCHEMA
type USAGEMETHODSCHEMA struct {
	// Type of method used 'AT_STORE': at the store 'HOTLINE': via hot line number 'WEBSITE': via website 'FORM': via order form 'BUY_IN_WEBVIEW': via web 'BUY_IN_APP': via App
	Type NullableString `json:"type,omitempty"`
	// Method title
	Title NullableString `json:"title,omitempty"`
	// Description of the method
	Description NullableString `json:"description,omitempty"`
	// Number
	Order NullableInt64 `json:"order,omitempty"`
	// Link to the usage method
	Link NullableString `json:"link,omitempty"`
	// Phone number 1
	Phone1 NullableString `json:"phone_1,omitempty"`
	// Phone number 2
	Phone2 NullableString `json:"phone_2,omitempty"`
}

// NewUSAGEMETHODSCHEMA instantiates a new USAGEMETHODSCHEMA object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUSAGEMETHODSCHEMA() *USAGEMETHODSCHEMA {
	this := USAGEMETHODSCHEMA{}
	return &this
}

// NewUSAGEMETHODSCHEMAWithDefaults instantiates a new USAGEMETHODSCHEMA object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUSAGEMETHODSCHEMAWithDefaults() *USAGEMETHODSCHEMA {
	this := USAGEMETHODSCHEMA{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *USAGEMETHODSCHEMA) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *USAGEMETHODSCHEMA) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *USAGEMETHODSCHEMA) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *USAGEMETHODSCHEMA) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *USAGEMETHODSCHEMA) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *USAGEMETHODSCHEMA) UnsetType() {
	o.Type.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *USAGEMETHODSCHEMA) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *USAGEMETHODSCHEMA) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *USAGEMETHODSCHEMA) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *USAGEMETHODSCHEMA) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *USAGEMETHODSCHEMA) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *USAGEMETHODSCHEMA) UnsetTitle() {
	o.Title.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *USAGEMETHODSCHEMA) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *USAGEMETHODSCHEMA) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *USAGEMETHODSCHEMA) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *USAGEMETHODSCHEMA) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *USAGEMETHODSCHEMA) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *USAGEMETHODSCHEMA) UnsetDescription() {
	o.Description.Unset()
}

// GetOrder returns the Order field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *USAGEMETHODSCHEMA) GetOrder() int64 {
	if o == nil || IsNil(o.Order.Get()) {
		var ret int64
		return ret
	}
	return *o.Order.Get()
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *USAGEMETHODSCHEMA) GetOrderOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Order.Get(), o.Order.IsSet()
}

// HasOrder returns a boolean if a field has been set.
func (o *USAGEMETHODSCHEMA) HasOrder() bool {
	if o != nil && o.Order.IsSet() {
		return true
	}

	return false
}

// SetOrder gets a reference to the given NullableInt64 and assigns it to the Order field.
func (o *USAGEMETHODSCHEMA) SetOrder(v int64) {
	o.Order.Set(&v)
}
// SetOrderNil sets the value for Order to be an explicit nil
func (o *USAGEMETHODSCHEMA) SetOrderNil() {
	o.Order.Set(nil)
}

// UnsetOrder ensures that no value is present for Order, not even an explicit nil
func (o *USAGEMETHODSCHEMA) UnsetOrder() {
	o.Order.Unset()
}

// GetLink returns the Link field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *USAGEMETHODSCHEMA) GetLink() string {
	if o == nil || IsNil(o.Link.Get()) {
		var ret string
		return ret
	}
	return *o.Link.Get()
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *USAGEMETHODSCHEMA) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Link.Get(), o.Link.IsSet()
}

// HasLink returns a boolean if a field has been set.
func (o *USAGEMETHODSCHEMA) HasLink() bool {
	if o != nil && o.Link.IsSet() {
		return true
	}

	return false
}

// SetLink gets a reference to the given NullableString and assigns it to the Link field.
func (o *USAGEMETHODSCHEMA) SetLink(v string) {
	o.Link.Set(&v)
}
// SetLinkNil sets the value for Link to be an explicit nil
func (o *USAGEMETHODSCHEMA) SetLinkNil() {
	o.Link.Set(nil)
}

// UnsetLink ensures that no value is present for Link, not even an explicit nil
func (o *USAGEMETHODSCHEMA) UnsetLink() {
	o.Link.Unset()
}

// GetPhone1 returns the Phone1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *USAGEMETHODSCHEMA) GetPhone1() string {
	if o == nil || IsNil(o.Phone1.Get()) {
		var ret string
		return ret
	}
	return *o.Phone1.Get()
}

// GetPhone1Ok returns a tuple with the Phone1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *USAGEMETHODSCHEMA) GetPhone1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phone1.Get(), o.Phone1.IsSet()
}

// HasPhone1 returns a boolean if a field has been set.
func (o *USAGEMETHODSCHEMA) HasPhone1() bool {
	if o != nil && o.Phone1.IsSet() {
		return true
	}

	return false
}

// SetPhone1 gets a reference to the given NullableString and assigns it to the Phone1 field.
func (o *USAGEMETHODSCHEMA) SetPhone1(v string) {
	o.Phone1.Set(&v)
}
// SetPhone1Nil sets the value for Phone1 to be an explicit nil
func (o *USAGEMETHODSCHEMA) SetPhone1Nil() {
	o.Phone1.Set(nil)
}

// UnsetPhone1 ensures that no value is present for Phone1, not even an explicit nil
func (o *USAGEMETHODSCHEMA) UnsetPhone1() {
	o.Phone1.Unset()
}

// GetPhone2 returns the Phone2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *USAGEMETHODSCHEMA) GetPhone2() string {
	if o == nil || IsNil(o.Phone2.Get()) {
		var ret string
		return ret
	}
	return *o.Phone2.Get()
}

// GetPhone2Ok returns a tuple with the Phone2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *USAGEMETHODSCHEMA) GetPhone2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phone2.Get(), o.Phone2.IsSet()
}

// HasPhone2 returns a boolean if a field has been set.
func (o *USAGEMETHODSCHEMA) HasPhone2() bool {
	if o != nil && o.Phone2.IsSet() {
		return true
	}

	return false
}

// SetPhone2 gets a reference to the given NullableString and assigns it to the Phone2 field.
func (o *USAGEMETHODSCHEMA) SetPhone2(v string) {
	o.Phone2.Set(&v)
}
// SetPhone2Nil sets the value for Phone2 to be an explicit nil
func (o *USAGEMETHODSCHEMA) SetPhone2Nil() {
	o.Phone2.Set(nil)
}

// UnsetPhone2 ensures that no value is present for Phone2, not even an explicit nil
func (o *USAGEMETHODSCHEMA) UnsetPhone2() {
	o.Phone2.Unset()
}

func (o USAGEMETHODSCHEMA) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o USAGEMETHODSCHEMA) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Order.IsSet() {
		toSerialize["order"] = o.Order.Get()
	}
	if o.Link.IsSet() {
		toSerialize["link"] = o.Link.Get()
	}
	if o.Phone1.IsSet() {
		toSerialize["phone_1"] = o.Phone1.Get()
	}
	if o.Phone2.IsSet() {
		toSerialize["phone_2"] = o.Phone2.Get()
	}
	return toSerialize, nil
}

type NullableUSAGEMETHODSCHEMA struct {
	value *USAGEMETHODSCHEMA
	isSet bool
}

func (v NullableUSAGEMETHODSCHEMA) Get() *USAGEMETHODSCHEMA {
	return v.value
}

func (v *NullableUSAGEMETHODSCHEMA) Set(val *USAGEMETHODSCHEMA) {
	v.value = val
	v.isSet = true
}

func (v NullableUSAGEMETHODSCHEMA) IsSet() bool {
	return v.isSet
}

func (v *NullableUSAGEMETHODSCHEMA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUSAGEMETHODSCHEMA(val *USAGEMETHODSCHEMA) *NullableUSAGEMETHODSCHEMA {
	return &NullableUSAGEMETHODSCHEMA{value: val, isSet: true}
}

func (v NullableUSAGEMETHODSCHEMA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUSAGEMETHODSCHEMA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


