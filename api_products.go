/*
Sample API

Technical document APIs for API Version 4.

API version: 4.0.0
Contact: quang.huynh@gotit.vn
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gotit_api_go_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProductsAPIService ProductsAPI service
type ProductsAPIService service

type ApiGetListOfProductsRequest struct {
	ctx context.Context
	ApiService *ProductsAPIService
	xGIAuthorization *string
	page *int64
	pageSize *int64
	minPrice *int64
	maxPrice *int64
	isExcludeStoreListInfo *bool
	storeListPage *int64
	storeListPageSize *int64
}

// Authorization
func (r ApiGetListOfProductsRequest) XGIAuthorization(xGIAuthorization string) ApiGetListOfProductsRequest {
	r.xGIAuthorization = &xGIAuthorization
	return r
}

// Page
func (r ApiGetListOfProductsRequest) Page(page int64) ApiGetListOfProductsRequest {
	r.page = &page
	return r
}

// Page Size
func (r ApiGetListOfProductsRequest) PageSize(pageSize int64) ApiGetListOfProductsRequest {
	r.pageSize = &pageSize
	return r
}

// Min price
func (r ApiGetListOfProductsRequest) MinPrice(minPrice int64) ApiGetListOfProductsRequest {
	r.minPrice = &minPrice
	return r
}

// Max price
func (r ApiGetListOfProductsRequest) MaxPrice(maxPrice int64) ApiGetListOfProductsRequest {
	r.maxPrice = &maxPrice
	return r
}

// Stores
func (r ApiGetListOfProductsRequest) IsExcludeStoreListInfo(isExcludeStoreListInfo bool) ApiGetListOfProductsRequest {
	r.isExcludeStoreListInfo = &isExcludeStoreListInfo
	return r
}

// Store Page
func (r ApiGetListOfProductsRequest) StoreListPage(storeListPage int64) ApiGetListOfProductsRequest {
	r.storeListPage = &storeListPage
	return r
}

// Store Page Size
func (r ApiGetListOfProductsRequest) StoreListPageSize(storeListPageSize int64) ApiGetListOfProductsRequest {
	r.storeListPageSize = &storeListPageSize
	return r
}

func (r ApiGetListOfProductsRequest) Execute() (*PRODUCTSRESPONSE, *http.Response, error) {
	return r.ApiService.GetListOfProductsExecute(r)
}

/*
GetListOfProducts Get all products master data

Returns all products master data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetListOfProductsRequest
*/
func (a *ProductsAPIService) GetListOfProducts(ctx context.Context) ApiGetListOfProductsRequest {
	return ApiGetListOfProductsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PRODUCTSRESPONSE
func (a *ProductsAPIService) GetListOfProductsExecute(r ApiGetListOfProductsRequest) (*PRODUCTSRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PRODUCTSRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductsAPIService.GetListOfProducts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4.0/products"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xGIAuthorization == nil {
		return localVarReturnValue, nil, reportError("xGIAuthorization is required and must be specified")
	}
	if r.page == nil {
		return localVarReturnValue, nil, reportError("page is required and must be specified")
	}
	if r.pageSize == nil {
		return localVarReturnValue, nil, reportError("pageSize is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	if r.minPrice != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minPrice", r.minPrice, "form", "")
	}
	if r.maxPrice != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxPrice", r.maxPrice, "form", "")
	}
	if r.isExcludeStoreListInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isExcludeStoreListInfo", r.isExcludeStoreListInfo, "form", "")
	}
	if r.storeListPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "storeListPage", r.storeListPage, "form", "")
	}
	if r.storeListPageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "storeListPageSize", r.storeListPageSize, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-GI-Authorization", r.xGIAuthorization, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v HTTPBADREQUEST
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v HTTPUNAUTHORIZED
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v HTTPNOTFOUND
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v HTTPINTERNALSERVERERROR
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProductDetailRequest struct {
	ctx context.Context
	ApiService *ProductsAPIService
	xGIAuthorization *string
	id int64
	isExcludeStoreListInfo *bool
	storeListPage *int64
	storeListPageSize *int64
}

// Authorization
func (r ApiGetProductDetailRequest) XGIAuthorization(xGIAuthorization string) ApiGetProductDetailRequest {
	r.xGIAuthorization = &xGIAuthorization
	return r
}

// Exclude store list information
func (r ApiGetProductDetailRequest) IsExcludeStoreListInfo(isExcludeStoreListInfo bool) ApiGetProductDetailRequest {
	r.isExcludeStoreListInfo = &isExcludeStoreListInfo
	return r
}

// Store Page
func (r ApiGetProductDetailRequest) StoreListPage(storeListPage int64) ApiGetProductDetailRequest {
	r.storeListPage = &storeListPage
	return r
}

// Store Page Size
func (r ApiGetProductDetailRequest) StoreListPageSize(storeListPageSize int64) ApiGetProductDetailRequest {
	r.storeListPageSize = &storeListPageSize
	return r
}

func (r ApiGetProductDetailRequest) Execute() (*PRODUCTDETAILRESPONSE, *http.Response, error) {
	return r.ApiService.GetProductDetailExecute(r)
}

/*
GetProductDetail Get product detail data

Returns product detail data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Product ID
 @return ApiGetProductDetailRequest
*/
func (a *ProductsAPIService) GetProductDetail(ctx context.Context, id int64) ApiGetProductDetailRequest {
	return ApiGetProductDetailRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PRODUCTDETAILRESPONSE
func (a *ProductsAPIService) GetProductDetailExecute(r ApiGetProductDetailRequest) (*PRODUCTDETAILRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PRODUCTDETAILRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductsAPIService.GetProductDetail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4.0/products/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xGIAuthorization == nil {
		return localVarReturnValue, nil, reportError("xGIAuthorization is required and must be specified")
	}

	if r.isExcludeStoreListInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isExcludeStoreListInfo", r.isExcludeStoreListInfo, "form", "")
	}
	if r.storeListPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "storeListPage", r.storeListPage, "form", "")
	}
	if r.storeListPageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "storeListPageSize", r.storeListPageSize, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-GI-Authorization", r.xGIAuthorization, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v HTTPBADREQUEST
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v HTTPUNAUTHORIZED
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v HTTPNOTFOUND
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v HTTPINTERNALSERVERERROR
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetStoresOfProductRequest struct {
	ctx context.Context
	ApiService *ProductsAPIService
	xGIAuthorization *string
	id int64
}

// Authorization
func (r ApiGetStoresOfProductRequest) XGIAuthorization(xGIAuthorization string) ApiGetStoresOfProductRequest {
	r.xGIAuthorization = &xGIAuthorization
	return r
}

func (r ApiGetStoresOfProductRequest) Execute() (*STORESRESPONSE, *http.Response, error) {
	return r.ApiService.GetStoresOfProductExecute(r)
}

/*
GetStoresOfProduct Get stores of this product

Returns all stores of this product

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Product ID
 @return ApiGetStoresOfProductRequest
*/
func (a *ProductsAPIService) GetStoresOfProduct(ctx context.Context, id int64) ApiGetStoresOfProductRequest {
	return ApiGetStoresOfProductRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return STORESRESPONSE
func (a *ProductsAPIService) GetStoresOfProductExecute(r ApiGetStoresOfProductRequest) (*STORESRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *STORESRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductsAPIService.GetStoresOfProduct")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4.0/products/{id}/stores"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xGIAuthorization == nil {
		return localVarReturnValue, nil, reportError("xGIAuthorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-GI-Authorization", r.xGIAuthorization, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v HTTPBADREQUEST
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v HTTPUNAUTHORIZED
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v HTTPNOTFOUND
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v HTTPINTERNALSERVERERROR
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
