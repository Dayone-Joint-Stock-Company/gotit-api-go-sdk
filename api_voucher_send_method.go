/*
Sample API

Technical document APIs for API Version 4.

API version: 4.0.0
Contact: quang.huynh@gotit.vn
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gotit_api_go_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// VoucherSendMethodAPIService VoucherSendMethodAPI service
type VoucherSendMethodAPIService service

type ApiCheckStatusZNSRequest struct {
	ctx context.Context
	ApiService *VoucherSendMethodAPIService
	xGIAuthorization *string
	rEQUESTCHECKSTATUSZNS *REQUESTCHECKSTATUSZNS
}

// Authorization
func (r ApiCheckStatusZNSRequest) XGIAuthorization(xGIAuthorization string) ApiCheckStatusZNSRequest {
	r.xGIAuthorization = &xGIAuthorization
	return r
}

func (r ApiCheckStatusZNSRequest) REQUESTCHECKSTATUSZNS(rEQUESTCHECKSTATUSZNS REQUESTCHECKSTATUSZNS) ApiCheckStatusZNSRequest {
	r.rEQUESTCHECKSTATUSZNS = &rEQUESTCHECKSTATUSZNS
	return r
}

func (r ApiCheckStatusZNSRequest) Execute() (*VOUCHERCHECKZNSRESPONSE, *http.Response, error) {
	return r.ApiService.CheckStatusZNSExecute(r)
}

/*
CheckStatusZNS Check status zns

Check status zns

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCheckStatusZNSRequest
*/
func (a *VoucherSendMethodAPIService) CheckStatusZNS(ctx context.Context) ApiCheckStatusZNSRequest {
	return ApiCheckStatusZNSRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VOUCHERCHECKZNSRESPONSE
func (a *VoucherSendMethodAPIService) CheckStatusZNSExecute(r ApiCheckStatusZNSRequest) (*VOUCHERCHECKZNSRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VOUCHERCHECKZNSRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VoucherSendMethodAPIService.CheckStatusZNS")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4.0/vouchers/send/zns/check"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xGIAuthorization == nil {
		return localVarReturnValue, nil, reportError("xGIAuthorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-GI-Authorization", r.xGIAuthorization, "simple", "")
	// body params
	localVarPostBody = r.rEQUESTCHECKSTATUSZNS
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v HTTPBADREQUEST
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v HTTPUNAUTHORIZED
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v HTTPNOTFOUND
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v HTTPINTERNALSERVERERROR
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSendVoucherByEmailRequest struct {
	ctx context.Context
	ApiService *VoucherSendMethodAPIService
	xGIAuthorization *string
	rEQUESTSENDVOUCHERBYEMAIL *REQUESTSENDVOUCHERBYEMAIL
}

// Authorization
func (r ApiSendVoucherByEmailRequest) XGIAuthorization(xGIAuthorization string) ApiSendVoucherByEmailRequest {
	r.xGIAuthorization = &xGIAuthorization
	return r
}

func (r ApiSendVoucherByEmailRequest) REQUESTSENDVOUCHERBYEMAIL(rEQUESTSENDVOUCHERBYEMAIL REQUESTSENDVOUCHERBYEMAIL) ApiSendVoucherByEmailRequest {
	r.rEQUESTSENDVOUCHERBYEMAIL = &rEQUESTSENDVOUCHERBYEMAIL
	return r
}

func (r ApiSendVoucherByEmailRequest) Execute() (*VOUCHERSENDEMAILRESPONSE, *http.Response, error) {
	return r.ApiService.SendVoucherByEmailExecute(r)
}

/*
SendVoucherByEmail Send voucher by mail

Send voucher by mail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSendVoucherByEmailRequest
*/
func (a *VoucherSendMethodAPIService) SendVoucherByEmail(ctx context.Context) ApiSendVoucherByEmailRequest {
	return ApiSendVoucherByEmailRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VOUCHERSENDEMAILRESPONSE
func (a *VoucherSendMethodAPIService) SendVoucherByEmailExecute(r ApiSendVoucherByEmailRequest) (*VOUCHERSENDEMAILRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VOUCHERSENDEMAILRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VoucherSendMethodAPIService.SendVoucherByEmail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4.0/vouchers/send/email"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xGIAuthorization == nil {
		return localVarReturnValue, nil, reportError("xGIAuthorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-GI-Authorization", r.xGIAuthorization, "simple", "")
	// body params
	localVarPostBody = r.rEQUESTSENDVOUCHERBYEMAIL
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v HTTPBADREQUEST
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v HTTPUNAUTHORIZED
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v HTTPNOTFOUND
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v HTTPINTERNALSERVERERROR
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSendVoucherBySMSRequest struct {
	ctx context.Context
	ApiService *VoucherSendMethodAPIService
	xGIAuthorization *string
	rEQUESTSENDVOUCHERBYSMS *REQUESTSENDVOUCHERBYSMS
}

// Authorization
func (r ApiSendVoucherBySMSRequest) XGIAuthorization(xGIAuthorization string) ApiSendVoucherBySMSRequest {
	r.xGIAuthorization = &xGIAuthorization
	return r
}

func (r ApiSendVoucherBySMSRequest) REQUESTSENDVOUCHERBYSMS(rEQUESTSENDVOUCHERBYSMS REQUESTSENDVOUCHERBYSMS) ApiSendVoucherBySMSRequest {
	r.rEQUESTSENDVOUCHERBYSMS = &rEQUESTSENDVOUCHERBYSMS
	return r
}

func (r ApiSendVoucherBySMSRequest) Execute() (*VOUCHERSENDSMSRESPONSE, *http.Response, error) {
	return r.ApiService.SendVoucherBySMSExecute(r)
}

/*
SendVoucherBySMS Send voucher by sms

Send voucher by sms

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSendVoucherBySMSRequest
*/
func (a *VoucherSendMethodAPIService) SendVoucherBySMS(ctx context.Context) ApiSendVoucherBySMSRequest {
	return ApiSendVoucherBySMSRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VOUCHERSENDSMSRESPONSE
func (a *VoucherSendMethodAPIService) SendVoucherBySMSExecute(r ApiSendVoucherBySMSRequest) (*VOUCHERSENDSMSRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VOUCHERSENDSMSRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VoucherSendMethodAPIService.SendVoucherBySMS")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4.0/vouchers/send/sms"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xGIAuthorization == nil {
		return localVarReturnValue, nil, reportError("xGIAuthorization is required and must be specified")
	}
	if r.rEQUESTSENDVOUCHERBYSMS == nil {
		return localVarReturnValue, nil, reportError("rEQUESTSENDVOUCHERBYSMS is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-GI-Authorization", r.xGIAuthorization, "simple", "")
	// body params
	localVarPostBody = r.rEQUESTSENDVOUCHERBYSMS
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v HTTPBADREQUEST
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v HTTPUNAUTHORIZED
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v HTTPNOTFOUND
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v HTTPINTERNALSERVERERROR
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSendVoucherByZNSRequest struct {
	ctx context.Context
	ApiService *VoucherSendMethodAPIService
	xGIAuthorization *string
	rEQUESTSENDVOUCHERBYZNS *REQUESTSENDVOUCHERBYZNS
}

// Authorization
func (r ApiSendVoucherByZNSRequest) XGIAuthorization(xGIAuthorization string) ApiSendVoucherByZNSRequest {
	r.xGIAuthorization = &xGIAuthorization
	return r
}

func (r ApiSendVoucherByZNSRequest) REQUESTSENDVOUCHERBYZNS(rEQUESTSENDVOUCHERBYZNS REQUESTSENDVOUCHERBYZNS) ApiSendVoucherByZNSRequest {
	r.rEQUESTSENDVOUCHERBYZNS = &rEQUESTSENDVOUCHERBYZNS
	return r
}

func (r ApiSendVoucherByZNSRequest) Execute() (*VOUCHERSENDZNSRESPONSE, *http.Response, error) {
	return r.ApiService.SendVoucherByZNSExecute(r)
}

/*
SendVoucherByZNS Send voucher by zns

Send voucher by zns

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSendVoucherByZNSRequest
*/
func (a *VoucherSendMethodAPIService) SendVoucherByZNS(ctx context.Context) ApiSendVoucherByZNSRequest {
	return ApiSendVoucherByZNSRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VOUCHERSENDZNSRESPONSE
func (a *VoucherSendMethodAPIService) SendVoucherByZNSExecute(r ApiSendVoucherByZNSRequest) (*VOUCHERSENDZNSRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VOUCHERSENDZNSRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VoucherSendMethodAPIService.SendVoucherByZNS")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4.0/vouchers/send/zns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xGIAuthorization == nil {
		return localVarReturnValue, nil, reportError("xGIAuthorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-GI-Authorization", r.xGIAuthorization, "simple", "")
	// body params
	localVarPostBody = r.rEQUESTSENDVOUCHERBYZNS
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v HTTPBADREQUEST
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v HTTPUNAUTHORIZED
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v HTTPNOTFOUND
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v HTTPINTERNALSERVERERROR
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
