/*
Sample API

Technical document APIs for API Version 4.

API version: 4.0.0
Contact: quang.huynh@gotit.vn
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gotit_api_go_sdk

import (
	"encoding/json"
)

// checks if the STORESSCHEMA type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &STORESSCHEMA{}

// STORESSCHEMA struct for STORESSCHEMA
type STORESSCHEMA struct {
	// Store Id
	StoreId NullableInt64 `json:"storeId,omitempty"`
	// Store Name
	StoreNm NullableString `json:"storeNm,omitempty"`
	// Store Address
	StoreAddr NullableString `json:"storeAddr,omitempty"`
	// Store Email
	StoreEm NullableString `json:"storeEm,omitempty"`
	// Store Phone
	StorePh NullableString `json:"storePh,omitempty"`
	// Lat location on Google maps
	Lat NullableFloat32 `json:"lat,omitempty"`
	// Long location on Google maps
	Long NullableFloat32 `json:"long,omitempty"`
	// Brand Name
	BrandNm NullableString `json:"brandNm,omitempty"`
	// District code (Got It identifier)
	DistrictId NullableInt64 `json:"districtId,omitempty"`
	// District name
	DistrictNm NullableString `json:"districtNm,omitempty"`
	// City code (Got It identifier)
	CityId NullableInt64 `json:"cityId,omitempty"`
	// City name
	CityNm NullableString `json:"cityNm,omitempty"`
}

// NewSTORESSCHEMA instantiates a new STORESSCHEMA object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSTORESSCHEMA() *STORESSCHEMA {
	this := STORESSCHEMA{}
	return &this
}

// NewSTORESSCHEMAWithDefaults instantiates a new STORESSCHEMA object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSTORESSCHEMAWithDefaults() *STORESSCHEMA {
	this := STORESSCHEMA{}
	return &this
}

// GetStoreId returns the StoreId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *STORESSCHEMA) GetStoreId() int64 {
	if o == nil || IsNil(o.StoreId.Get()) {
		var ret int64
		return ret
	}
	return *o.StoreId.Get()
}

// GetStoreIdOk returns a tuple with the StoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *STORESSCHEMA) GetStoreIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoreId.Get(), o.StoreId.IsSet()
}

// HasStoreId returns a boolean if a field has been set.
func (o *STORESSCHEMA) HasStoreId() bool {
	if o != nil && o.StoreId.IsSet() {
		return true
	}

	return false
}

// SetStoreId gets a reference to the given NullableInt64 and assigns it to the StoreId field.
func (o *STORESSCHEMA) SetStoreId(v int64) {
	o.StoreId.Set(&v)
}
// SetStoreIdNil sets the value for StoreId to be an explicit nil
func (o *STORESSCHEMA) SetStoreIdNil() {
	o.StoreId.Set(nil)
}

// UnsetStoreId ensures that no value is present for StoreId, not even an explicit nil
func (o *STORESSCHEMA) UnsetStoreId() {
	o.StoreId.Unset()
}

// GetStoreNm returns the StoreNm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *STORESSCHEMA) GetStoreNm() string {
	if o == nil || IsNil(o.StoreNm.Get()) {
		var ret string
		return ret
	}
	return *o.StoreNm.Get()
}

// GetStoreNmOk returns a tuple with the StoreNm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *STORESSCHEMA) GetStoreNmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoreNm.Get(), o.StoreNm.IsSet()
}

// HasStoreNm returns a boolean if a field has been set.
func (o *STORESSCHEMA) HasStoreNm() bool {
	if o != nil && o.StoreNm.IsSet() {
		return true
	}

	return false
}

// SetStoreNm gets a reference to the given NullableString and assigns it to the StoreNm field.
func (o *STORESSCHEMA) SetStoreNm(v string) {
	o.StoreNm.Set(&v)
}
// SetStoreNmNil sets the value for StoreNm to be an explicit nil
func (o *STORESSCHEMA) SetStoreNmNil() {
	o.StoreNm.Set(nil)
}

// UnsetStoreNm ensures that no value is present for StoreNm, not even an explicit nil
func (o *STORESSCHEMA) UnsetStoreNm() {
	o.StoreNm.Unset()
}

// GetStoreAddr returns the StoreAddr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *STORESSCHEMA) GetStoreAddr() string {
	if o == nil || IsNil(o.StoreAddr.Get()) {
		var ret string
		return ret
	}
	return *o.StoreAddr.Get()
}

// GetStoreAddrOk returns a tuple with the StoreAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *STORESSCHEMA) GetStoreAddrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoreAddr.Get(), o.StoreAddr.IsSet()
}

// HasStoreAddr returns a boolean if a field has been set.
func (o *STORESSCHEMA) HasStoreAddr() bool {
	if o != nil && o.StoreAddr.IsSet() {
		return true
	}

	return false
}

// SetStoreAddr gets a reference to the given NullableString and assigns it to the StoreAddr field.
func (o *STORESSCHEMA) SetStoreAddr(v string) {
	o.StoreAddr.Set(&v)
}
// SetStoreAddrNil sets the value for StoreAddr to be an explicit nil
func (o *STORESSCHEMA) SetStoreAddrNil() {
	o.StoreAddr.Set(nil)
}

// UnsetStoreAddr ensures that no value is present for StoreAddr, not even an explicit nil
func (o *STORESSCHEMA) UnsetStoreAddr() {
	o.StoreAddr.Unset()
}

// GetStoreEm returns the StoreEm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *STORESSCHEMA) GetStoreEm() string {
	if o == nil || IsNil(o.StoreEm.Get()) {
		var ret string
		return ret
	}
	return *o.StoreEm.Get()
}

// GetStoreEmOk returns a tuple with the StoreEm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *STORESSCHEMA) GetStoreEmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoreEm.Get(), o.StoreEm.IsSet()
}

// HasStoreEm returns a boolean if a field has been set.
func (o *STORESSCHEMA) HasStoreEm() bool {
	if o != nil && o.StoreEm.IsSet() {
		return true
	}

	return false
}

// SetStoreEm gets a reference to the given NullableString and assigns it to the StoreEm field.
func (o *STORESSCHEMA) SetStoreEm(v string) {
	o.StoreEm.Set(&v)
}
// SetStoreEmNil sets the value for StoreEm to be an explicit nil
func (o *STORESSCHEMA) SetStoreEmNil() {
	o.StoreEm.Set(nil)
}

// UnsetStoreEm ensures that no value is present for StoreEm, not even an explicit nil
func (o *STORESSCHEMA) UnsetStoreEm() {
	o.StoreEm.Unset()
}

// GetStorePh returns the StorePh field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *STORESSCHEMA) GetStorePh() string {
	if o == nil || IsNil(o.StorePh.Get()) {
		var ret string
		return ret
	}
	return *o.StorePh.Get()
}

// GetStorePhOk returns a tuple with the StorePh field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *STORESSCHEMA) GetStorePhOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorePh.Get(), o.StorePh.IsSet()
}

// HasStorePh returns a boolean if a field has been set.
func (o *STORESSCHEMA) HasStorePh() bool {
	if o != nil && o.StorePh.IsSet() {
		return true
	}

	return false
}

// SetStorePh gets a reference to the given NullableString and assigns it to the StorePh field.
func (o *STORESSCHEMA) SetStorePh(v string) {
	o.StorePh.Set(&v)
}
// SetStorePhNil sets the value for StorePh to be an explicit nil
func (o *STORESSCHEMA) SetStorePhNil() {
	o.StorePh.Set(nil)
}

// UnsetStorePh ensures that no value is present for StorePh, not even an explicit nil
func (o *STORESSCHEMA) UnsetStorePh() {
	o.StorePh.Unset()
}

// GetLat returns the Lat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *STORESSCHEMA) GetLat() float32 {
	if o == nil || IsNil(o.Lat.Get()) {
		var ret float32
		return ret
	}
	return *o.Lat.Get()
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *STORESSCHEMA) GetLatOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lat.Get(), o.Lat.IsSet()
}

// HasLat returns a boolean if a field has been set.
func (o *STORESSCHEMA) HasLat() bool {
	if o != nil && o.Lat.IsSet() {
		return true
	}

	return false
}

// SetLat gets a reference to the given NullableFloat32 and assigns it to the Lat field.
func (o *STORESSCHEMA) SetLat(v float32) {
	o.Lat.Set(&v)
}
// SetLatNil sets the value for Lat to be an explicit nil
func (o *STORESSCHEMA) SetLatNil() {
	o.Lat.Set(nil)
}

// UnsetLat ensures that no value is present for Lat, not even an explicit nil
func (o *STORESSCHEMA) UnsetLat() {
	o.Lat.Unset()
}

// GetLong returns the Long field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *STORESSCHEMA) GetLong() float32 {
	if o == nil || IsNil(o.Long.Get()) {
		var ret float32
		return ret
	}
	return *o.Long.Get()
}

// GetLongOk returns a tuple with the Long field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *STORESSCHEMA) GetLongOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Long.Get(), o.Long.IsSet()
}

// HasLong returns a boolean if a field has been set.
func (o *STORESSCHEMA) HasLong() bool {
	if o != nil && o.Long.IsSet() {
		return true
	}

	return false
}

// SetLong gets a reference to the given NullableFloat32 and assigns it to the Long field.
func (o *STORESSCHEMA) SetLong(v float32) {
	o.Long.Set(&v)
}
// SetLongNil sets the value for Long to be an explicit nil
func (o *STORESSCHEMA) SetLongNil() {
	o.Long.Set(nil)
}

// UnsetLong ensures that no value is present for Long, not even an explicit nil
func (o *STORESSCHEMA) UnsetLong() {
	o.Long.Unset()
}

// GetBrandNm returns the BrandNm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *STORESSCHEMA) GetBrandNm() string {
	if o == nil || IsNil(o.BrandNm.Get()) {
		var ret string
		return ret
	}
	return *o.BrandNm.Get()
}

// GetBrandNmOk returns a tuple with the BrandNm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *STORESSCHEMA) GetBrandNmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BrandNm.Get(), o.BrandNm.IsSet()
}

// HasBrandNm returns a boolean if a field has been set.
func (o *STORESSCHEMA) HasBrandNm() bool {
	if o != nil && o.BrandNm.IsSet() {
		return true
	}

	return false
}

// SetBrandNm gets a reference to the given NullableString and assigns it to the BrandNm field.
func (o *STORESSCHEMA) SetBrandNm(v string) {
	o.BrandNm.Set(&v)
}
// SetBrandNmNil sets the value for BrandNm to be an explicit nil
func (o *STORESSCHEMA) SetBrandNmNil() {
	o.BrandNm.Set(nil)
}

// UnsetBrandNm ensures that no value is present for BrandNm, not even an explicit nil
func (o *STORESSCHEMA) UnsetBrandNm() {
	o.BrandNm.Unset()
}

// GetDistrictId returns the DistrictId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *STORESSCHEMA) GetDistrictId() int64 {
	if o == nil || IsNil(o.DistrictId.Get()) {
		var ret int64
		return ret
	}
	return *o.DistrictId.Get()
}

// GetDistrictIdOk returns a tuple with the DistrictId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *STORESSCHEMA) GetDistrictIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DistrictId.Get(), o.DistrictId.IsSet()
}

// HasDistrictId returns a boolean if a field has been set.
func (o *STORESSCHEMA) HasDistrictId() bool {
	if o != nil && o.DistrictId.IsSet() {
		return true
	}

	return false
}

// SetDistrictId gets a reference to the given NullableInt64 and assigns it to the DistrictId field.
func (o *STORESSCHEMA) SetDistrictId(v int64) {
	o.DistrictId.Set(&v)
}
// SetDistrictIdNil sets the value for DistrictId to be an explicit nil
func (o *STORESSCHEMA) SetDistrictIdNil() {
	o.DistrictId.Set(nil)
}

// UnsetDistrictId ensures that no value is present for DistrictId, not even an explicit nil
func (o *STORESSCHEMA) UnsetDistrictId() {
	o.DistrictId.Unset()
}

// GetDistrictNm returns the DistrictNm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *STORESSCHEMA) GetDistrictNm() string {
	if o == nil || IsNil(o.DistrictNm.Get()) {
		var ret string
		return ret
	}
	return *o.DistrictNm.Get()
}

// GetDistrictNmOk returns a tuple with the DistrictNm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *STORESSCHEMA) GetDistrictNmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DistrictNm.Get(), o.DistrictNm.IsSet()
}

// HasDistrictNm returns a boolean if a field has been set.
func (o *STORESSCHEMA) HasDistrictNm() bool {
	if o != nil && o.DistrictNm.IsSet() {
		return true
	}

	return false
}

// SetDistrictNm gets a reference to the given NullableString and assigns it to the DistrictNm field.
func (o *STORESSCHEMA) SetDistrictNm(v string) {
	o.DistrictNm.Set(&v)
}
// SetDistrictNmNil sets the value for DistrictNm to be an explicit nil
func (o *STORESSCHEMA) SetDistrictNmNil() {
	o.DistrictNm.Set(nil)
}

// UnsetDistrictNm ensures that no value is present for DistrictNm, not even an explicit nil
func (o *STORESSCHEMA) UnsetDistrictNm() {
	o.DistrictNm.Unset()
}

// GetCityId returns the CityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *STORESSCHEMA) GetCityId() int64 {
	if o == nil || IsNil(o.CityId.Get()) {
		var ret int64
		return ret
	}
	return *o.CityId.Get()
}

// GetCityIdOk returns a tuple with the CityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *STORESSCHEMA) GetCityIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CityId.Get(), o.CityId.IsSet()
}

// HasCityId returns a boolean if a field has been set.
func (o *STORESSCHEMA) HasCityId() bool {
	if o != nil && o.CityId.IsSet() {
		return true
	}

	return false
}

// SetCityId gets a reference to the given NullableInt64 and assigns it to the CityId field.
func (o *STORESSCHEMA) SetCityId(v int64) {
	o.CityId.Set(&v)
}
// SetCityIdNil sets the value for CityId to be an explicit nil
func (o *STORESSCHEMA) SetCityIdNil() {
	o.CityId.Set(nil)
}

// UnsetCityId ensures that no value is present for CityId, not even an explicit nil
func (o *STORESSCHEMA) UnsetCityId() {
	o.CityId.Unset()
}

// GetCityNm returns the CityNm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *STORESSCHEMA) GetCityNm() string {
	if o == nil || IsNil(o.CityNm.Get()) {
		var ret string
		return ret
	}
	return *o.CityNm.Get()
}

// GetCityNmOk returns a tuple with the CityNm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *STORESSCHEMA) GetCityNmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CityNm.Get(), o.CityNm.IsSet()
}

// HasCityNm returns a boolean if a field has been set.
func (o *STORESSCHEMA) HasCityNm() bool {
	if o != nil && o.CityNm.IsSet() {
		return true
	}

	return false
}

// SetCityNm gets a reference to the given NullableString and assigns it to the CityNm field.
func (o *STORESSCHEMA) SetCityNm(v string) {
	o.CityNm.Set(&v)
}
// SetCityNmNil sets the value for CityNm to be an explicit nil
func (o *STORESSCHEMA) SetCityNmNil() {
	o.CityNm.Set(nil)
}

// UnsetCityNm ensures that no value is present for CityNm, not even an explicit nil
func (o *STORESSCHEMA) UnsetCityNm() {
	o.CityNm.Unset()
}

func (o STORESSCHEMA) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o STORESSCHEMA) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.StoreId.IsSet() {
		toSerialize["storeId"] = o.StoreId.Get()
	}
	if o.StoreNm.IsSet() {
		toSerialize["storeNm"] = o.StoreNm.Get()
	}
	if o.StoreAddr.IsSet() {
		toSerialize["storeAddr"] = o.StoreAddr.Get()
	}
	if o.StoreEm.IsSet() {
		toSerialize["storeEm"] = o.StoreEm.Get()
	}
	if o.StorePh.IsSet() {
		toSerialize["storePh"] = o.StorePh.Get()
	}
	if o.Lat.IsSet() {
		toSerialize["lat"] = o.Lat.Get()
	}
	if o.Long.IsSet() {
		toSerialize["long"] = o.Long.Get()
	}
	if o.BrandNm.IsSet() {
		toSerialize["brandNm"] = o.BrandNm.Get()
	}
	if o.DistrictId.IsSet() {
		toSerialize["districtId"] = o.DistrictId.Get()
	}
	if o.DistrictNm.IsSet() {
		toSerialize["districtNm"] = o.DistrictNm.Get()
	}
	if o.CityId.IsSet() {
		toSerialize["cityId"] = o.CityId.Get()
	}
	if o.CityNm.IsSet() {
		toSerialize["cityNm"] = o.CityNm.Get()
	}
	return toSerialize, nil
}

type NullableSTORESSCHEMA struct {
	value *STORESSCHEMA
	isSet bool
}

func (v NullableSTORESSCHEMA) Get() *STORESSCHEMA {
	return v.value
}

func (v *NullableSTORESSCHEMA) Set(val *STORESSCHEMA) {
	v.value = val
	v.isSet = true
}

func (v NullableSTORESSCHEMA) IsSet() bool {
	return v.isSet
}

func (v *NullableSTORESSCHEMA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSTORESSCHEMA(val *STORESSCHEMA) *NullableSTORESSCHEMA {
	return &NullableSTORESSCHEMA{value: val, isSet: true}
}

func (v NullableSTORESSCHEMA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSTORESSCHEMA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


